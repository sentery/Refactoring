-- @path CFG=/AnalysisCode/Metamodel/CFG.ecore
-- @path GAST=/AnalysisCode/Metamodel/gastm.ecore


module GAST2CFG;
create OUT : CFG from IN : GAST;


helper context GAST!BlockStatement def: getMap() : Map(GAST!Statement, GAST!Statement) =
	self.statements->iterate(e; acc: TupleType(prev: GAST!Statement,map: Map(GAST!Statement, GAST!Statement)) = Tuple{ prev = Sequence {}->first(), map = Map{}} |
	
				Tuple{prev = e, map = if acc.prev.oclIsUndefined() then
									acc.map
								else 
									acc.map.including(acc.prev, e)
								endif
												}).map;


helper def: next : Map(GAST!Statement, GAST!Statement) =
       GAST!BlockStatement.allInstances()->asSequence()->iterate(e; acc : Map(GAST!Statement, GAST!Statement) = Map {} |
               acc.union(e.getMap())
       );

helper context GAST!Statement def: next : GAST!Statement =
	thisModule.next.get(self);

--------------------------------------------------------------------------------------



--helper context GAST!BlockStatement def: dfNext(var : GAST!LocalVariable) : Sequence(GAST!Statement)=
--	self.statements->iterate(e; acc: Sequence(GAST!Statement) = Sequence{} |
--	
--				e.accesses->collect(c | 	
--					if  c.oclIsKindOf(GAST!VariableAccess)  then 
--							if  c.accessedTarget = var then
--		
--									acc.including(e)
--							else
--									Sequence{}
--							endif
--					else
--							Sequence{}
--					endif
--												));
--helper def: getNext(var : GAST!LocalVariable) : Sequence(GAST!Statement) =
--       GAST!BlockStatement.allInstances()->asSequence()->iterate(e; acc : Sequence(GAST!Statement)=  Sequence {} |
--               acc.union(e.dfNext(var))
--       );
--
--helper context GAST!Statement def: getDfNext  : Sequence(GAST!Statement) =
--	thisModule.getNext(self.accesses->collect(e |
--				if e.oclIsKindOf(GAST!VariableAccess) then 
--					e.accessedTarget
--				else
--					false
--				endif
--			)->first());

helper context GAST!Statement def: getDfNext (var : GAST!LocalVariable) : Sequence(GAST!Statement) =
	
--	GAST!Statement.allInstances()->select(r | not r.oclIsKindOf(GAST!BlockStatement))->reject(r1 | r1 = self)->

GAST!Statement.allInstances()->reject(r |  r.oclIsKindOf(GAST!BlockStatement))->reject(r1 | r1 = self)->
	iterate(e; acc: Sequence(GAST!Statement) = Sequence{} |
	
	e.accesses->collect(c | 
		
		if  c.oclIsKindOf(GAST!VariableAccess)  then 
			if  c.accessedTarget = var then
		
				acc.including(e)
			else
				Sequence{}
			endif
		else
			Sequence{}
		endif
	)
	
	);
	
	






---------------------------------------------------------------------------------------




abstract rule Statement2Node {
	from
		s : GAST!Statement( not s.oclIsKindOf(GAST!BlockStatement))
	to 
		t : CFG!AbstractNode (
--			dataFlow <- s.getDfNext
			
			dataFlow <- s.getDfNext(
					s.accesses->collect(e |
				if e.oclIsKindOf(GAST!VariableAccess) then 
					e.accessedTarget
				else
					false
				endif
			)->first())
			,
			dUse <- if not s.accesses.first().oclIsUndefined() and  s.accesses.first().oclIsKindOf(GAST!VariableAccess)then 
						s.accesses.first().write.toString()
					else
						'false'
					endif
			,
			var <- s.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c | c.accessedTarget)
				->select(e2| e2.oclIsKindOf(GAST!LocalVariable) )
			,
			params <- s.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c | c.accessedTarget)
				->select(e2| e2.oclIsKindOf(GAST!FormalParameter) )
			
		)
		
		
}



rule createMCFG {
	from
		s : GAST!Method(not s.body.oclIsUndefined())
	to 
		t : CFG!MControlFlowGraph (
			name <- s.simpleName
			,
			nodes <- if not s.body.oclIsUndefined() then
						s.body.statements
					else s.body
					endif
					,
			localVar <- s.localVariables->union(s.formalParameters)
		)
		
		do {	


		
		}
}

rule LoopStatement extends Statement2Node  {
	from
		s : GAST!LoopStatement
	to 
		t : CFG!IterativeNode (
			trueConditionNode <- s.body.statements.first(),
			falseConditionNode <- s.next,
			name <- s.kind.toString(),
			nodes <-  s.body.statements
			
			
		)
}

rule SimpleStatement extends Statement2Node {
	from
		s : GAST!SimpleStatement
	to 
		t : CFG!Node (
			toNode <-  if s.oclIsUndefined() then 
							s.refImmediateComposite().refImmediateComposite()
						else
							s.next
						endif
						
						
						
		)
		
				do{
--					s.getDfNext.debug();
--					s.getDfNext(
--					s.accesses->collect(e |
--				if e.oclIsKindOf(GAST!VariableAccess) then 
--					e.accessedTarget
--				else
--					false
--				endif
--			)->first()).debug();
--					s.accesses->select(e |e.oclIsKindOf(GAST!VariableAccess)->select(c | c.accessedTarget.oclIsKindOf(GAST!LocalVariable)))->first().simpleName.debug();
--					s.accesses->collect(e |e.accessedTarget)->first().simpleName.debug();
		}
}


rule jumpStatement extends Statement2Node {
	from
		s : GAST!JumpStatement
	to 
		t : CFG!Node (
			toNode <- if s.oclIsUndefined() then 
						s.refImmediateComposite().refImmediateComposite()
						else
							s.next
						endif
		)

}

rule BranchStatement  extends Statement2Node{
	from
		s : GAST!BranchStatement
	to 
		t : CFG!ConditionalNode (
			 trueConditionNode <-  if s.branches.first().statement.oclIsKindOf(GAST!BlockStatement) then
									 s.branches.first().statement.blockstatement
									else
										s.branches.first().statement
									endif
			,
			 
			 falseConditionNode <-   if s.branches.last().statement.oclIsKindOf(GAST!BlockStatement) then 
									 s.branches.last().statement.blockstatement
									 else
									 	s.branches.last().statement
									endif
									
			,


			toNode <- s.next
			
			
			
			
		)
	
	do{
	}

}

-- rule Brannch {
--	from
--		s : GAST!Branch
--	to 
--		t : CFG!Node (
----			toNode <- s.statement.next
--		var <- s.statement.accesses->select(e | e.oclIsKindOf(GAST!VariableAccess))->collect(c | c.accessedTarget)->select(e2| e2.oclIsKindOf(GAST!LocalVariable))
--
--		)
--}


 rule LocalVariable2Var {
	from
		s : GAST!LocalVariable
	to 
		t : CFG!Var (
			name <- s.simpleName
			
			
		)
}
 
 rule FormalParam {
	from
		s : GAST!FormalParameter
	to 
		t : CFG!Param (
			name <- s.simpleName
		)
}


--rule ExpressionStatement  extends Statement2Node {
--	from
--		s : GAST!GASTExpression
--	to 
--		t : CFG!ConditionalNode (
--			toNode <- s.annotations.
--		)
--}